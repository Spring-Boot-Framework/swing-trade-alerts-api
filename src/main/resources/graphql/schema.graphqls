schema {
    query : Query
    mutation: Mutation
}

type User {
    id: String!
    name: String!
    authProvider: String
    imageUrl: String
    watchList: [Stock]
    fcmToken: String
    countryCode: String
    timeZone: String
    ipAddress: String
    createdDate: String
    modifiedDate: String
}

type Stock {
    id: String!
    symbol: String!
    company: String
    price: Float
    changePercent: Float
    marketCap: Float
    peRatio: Float
    week52High: Float
    week52Low: Float
    ytdChangePercent: Float
    modifiedDate: String
}

type TargetRange {
    from: Float
    to: Float
}

type Alert {
    id: String!
    symbol: String!
    timeFrame: String!
    type: String!
    action: String
    targetRange: TargetRange
    createdDate: String
    modifiedDate: String
}

input TargetRangeInput {
    from: Float
    to: Float
}

input AlertInput {
    id: String
    symbol: String!
    timeFrame: String!
    type: String!
    action: String
    targetRange: TargetRangeInput
    title: String
}

type Notification {
    id: String!
    alert: Alert
    message: String!
}

type Response {
    success: Boolean
    message: String
    user: User
}

type Query {
    getWatchList:[Stock]
    searchStocks(searchTerm: String): [Stock]
#    getAlertConfigs(symbol: String): [Alert]
#    getNotifications: [Notification]
}

type Mutation {
    loginUser(accessToken: String): Response
    addStock(symbol: String):Response
    addAlert(alertInput: AlertInput): Response
    updateAlert(alertInput: AlertInput): Response
    runJob(jobId: Float): Response
}